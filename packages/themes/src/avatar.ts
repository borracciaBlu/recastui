import { cva } from 'class-variance-authority';
import { colors, RecastColors } from './colors';

export enum AvatarVariantTypes {
	filled = 'filled',
	outline = 'outline',
	subtle = 'subtle',
}

const variantClasses = {
	// Need to explicitly defined color variation classes for individual color as tailwindcss compiler cannot detect dynamically formed classes
	filled: {
		main: 'bg-main-4 text-main-12',
		tomato: 'bg-tomato-9 text-white',
		red: 'bg-red-9 text-white',
		crimson: 'bg-crimson-9 text-white',
		pink: 'bg-pink-9 text-white',
		plum: 'bg-plum-9 text-white',
		purple: 'bg-purple-9 text-white',
		violet: 'bg-violet-9 text-white',
		indigo: 'bg-indigo-9 text-white',
		blue: 'bg-blue-9 text-white',
		cyan: 'bg-cyan-9 text-white',
		teal: 'bg-teal-9 text-white',
		green: 'bg-green-9 text-white',
		grass: 'bg-grass-9 text-white',
		orange: 'bg-orange-9 text-white',
		brown: 'bg-brown-9 text-white',
		sky: 'bg-sky-9 text-black',
		mint: 'bg-mint-9 text-black',
		lime: 'bg-lime-9 text-black',
		yellow: 'bg-yellow-9 text-black',
		amber: 'bg-amber-9 text-black',
		gold: 'bg-gold-9 text-white',
		bronze: 'bg-bronze-9 text-white',
		error: 'bg-red-9 text-white',
		info: 'bg-sky-9 text-black',
		success: 'bg-green-9 text-white',
		warning: 'bg-amber-9 text-black',
	},
	outline: {
		main: 'bg-main-4 text-main-12 border-main-9 border-2',
		tomato: 'bg-tomato-4 text-tomato-9 border-tomato-12 border-2',
		red: 'bg-red-4 text-red-9 border-red-12 border-2',
		crimson: 'bg-crimson-4 text-crimson-9 border-crimson-12 border-2',
		pink: 'bg-pink-4 text-pink-9 border-pink-12 border-2',
		plum: 'bg-plum-4 text-plum-9 border-plum-12 border-2',
		purple: 'bg-purple-4 text-purple-9 border-purple-12 border-2',
		violet: 'bg-violet-4 text-violet-9 border-violet-12 border-2',
		indigo: 'bg-indigo-4 text-indigo-9 border-indigo-12 border-2',
		blue: 'bg-blue-4 text-blue-9 border-blue-12 border-2',
		cyan: 'bg-cyan-4 text-cyan-9 border-cyan-12 border-2',
		teal: 'bg-teal-4 text-teal-9 border-teal-12 border-2',
		green: 'bg-green-4 text-green-9 border-green-12 border-2',
		grass: 'bg-grass-4 text-grass-9 border-grass-12 border-2',
		orange: 'bg-orange-4 text-orange-9 border-orange-12 border-2',
		brown: 'bg-brown-4 text-brown-9 border-brown-12 border-2',
		sky: 'bg-sky-4 text-sky-9 border-sky-12 border-2',
		mint: 'bg-mint-4 text-mint-9 border-mint-12 border-2',
		lime: 'bg-lime-4 text-lime-9 border-lime-12 border-2',
		yellow: 'bg-yellow-4 text-yellow-9 border-yellow-12 border-2',
		amber: 'bg-amber-4 text-amber-9 border-amber-12 border-2',
		gold: 'bg-gold-4 text-gold-9 border-gold-12 border-2',
		bronze: 'bg-bronze-4 text-bronze-9 border-bronze-12 border-2',
		error: 'bg-red-4 text-red-9 border-red-12 border-2',
		info: 'bg-sky-4 text-sky-9 border-sky-12 border-2',
		success: 'bg-green-4 text-green-9 border-green-12 border-2',
		warning: 'bg-amber-4 text-amber-9 border-amber-12 border-2',
	},
	subtle: {
		main: 'bg-main-4 text-main-12',
		tomato: 'bg-tomato-4 text-tomato-12',
		red: 'bg-red-4 text-red-12',
		crimson: 'bg-crimson-4 text-crimson-12',
		pink: 'bg-pink-4 text-pink-12',
		plum: 'bg-plum-4 text-plum-12',
		purple: 'bg-purple-4 text-purple-12',
		violet: 'bg-violet-4 text-violet-12',
		indigo: 'bg-indigo-4 text-indigo-12',
		blue: 'bg-blue-4 text-blue-12',
		cyan: 'bg-cyan-4 text-cyan-12',
		teal: 'bg-teal-4 text-teal-12',
		green: 'bg-green-4 text-green-12',
		grass: 'bg-grass-4 text-grass-12',
		orange: 'bg-orange-4 text-orange-12',
		brown: 'bg-brown-4 text-brown-12',
		sky: 'bg-sky-4 text-sky-12',
		mint: 'bg-mint-4 text-mint-12',
		lime: 'bg-lime-4 text-lime-12',
		yellow: 'bg-yellow-4 text-yellow-12',
		amber: 'bg-amber-4 text-amber-12',
		gold: 'bg-gold-4 text-gold-12',
		bronze: 'bg-bronze-4 text-bronze-12',
		error: 'bg-red-4 text-red-12',
		info: 'bg-sky-4 text-sky-12',
		success: 'bg-green-4 text-green-12',
		warning: 'bg-amber-4 text-amber-12',
	},
};

const getColorVariants = (type: AvatarVariantTypes) =>
	colors.map((color: RecastColors) => {
		return {
			variant: AvatarVariantTypes[type],
			color: color as RecastColors,
			class: variantClasses[type][color],
		};
	});

const compoundVariants = [
	...getColorVariants(AvatarVariantTypes.filled),
	...getColorVariants(AvatarVariantTypes.outline),
	...getColorVariants(AvatarVariantTypes.subtle),
];

export const avatar = cva(
	['inline-flex', 'relative', 'p-0.5', 'justify-center', 'items-center', 'uppercase'],
	{
		variants: {
			variant: {
				filled: '',
				outline: '',
				subtle: '',
			},
			rounded: {
				none: 'rounded-none',
				sm: 'rounded-sm',
				md: 'rounded-md',
				lg: 'rounded-lg',
				xl: 'rounded-xl',
				full: 'rounded-full',
			},
			size: {
				xxs: 'w-6 h-6 text-xs',
				xs: 'w-8 h-8 text-xs',
				sm: 'w-10 h-10 text-sm',
				md: 'w-12 h-12',
				lg: 'w-14 h-14 text-lg',
				xl: 'w-16 h-16 text-xl',
				xxl: 'w-20 h-20 text-2xl',
			},
			color: {
				main: '',
				tomato: '',
				red: '',
				crimson: '',
				pink: '',
				plum: '',
				purple: '',
				violet: '',
				indigo: '',
				blue: '',
				cyan: '',
				teal: '',
				green: '',
				grass: '',
				orange: '',
				brown: '',
				sky: '',
				mint: '',
				lime: '',
				yellow: '',
				amber: '',
				gold: '',
				bronze: '',
				error: '',
				info: '',
				success: '',
				warning: '',
			},
		},
		compoundVariants,
		defaultVariants: {
			color: 'main',
			size: 'md',
			rounded: 'none',
			variant: 'filled',
		},
	},
);

export type AvatarTheme = typeof avatar;
